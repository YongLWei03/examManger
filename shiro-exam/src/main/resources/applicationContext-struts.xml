<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" 
xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
 xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context 
 http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop 
 http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx 
 http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

<context:annotation-config></context:annotation-config>
<context:component-scan base-package="com.mf.*"/> 

<bean id="loginAction" class="com.mf.action.LoginAction" autowire="byName" scope="prototype"></bean> 
<bean id="rolefunAction" class="com.mf.action.RolePermissionAction" autowire="byName" scope="prototype"></bean>
<bean id="qBankManagerAction" class="com.mf.action.QBankManagerAction" autowire="byName" scope="prototype"></bean> 
<bean id="insertQbAction" class="com.mf.action.InsertQbAction" autowire="byName" scope="prototype"></bean>
	<!-- 0.连接池属性设置读取指定的properties文件 -->
	<context:property-placeholder location="classpath:db.properties" />	

	<!-- 1.将连接池放入spring容器 -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource"          
        destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	
	<!--2. 配置 Mybatis的会话工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:com/mf/mapper/*.xml"></property>
		<!-- 加载mybatis.xml配置文件 -->
		 <property name="configLocation" value="classpath:mybatis.xml"/> 
	</bean>
	
	 
	 <!-- 3.2通过MapperScannerConfigurer扫描进行批量生成代理对象 
	 	遵循规范:mapper.java和mapper.xml名字一样且在同一个目录下
		自动扫描出来的代理对象的id为mapper类类名（首字母小写）	 
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	     <!-- 指定扫描的包名，如果有多个，用半角逗号分隔 -->
	     <property name="basePackage" value="com.mf.mapper"></property>
	     <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	 </bean>
	 
	 
	<!-- 4.配置事务管理器 -->
	<!-- 事务核心管理器，封装了事务操作，依赖于连接池 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 开启事务管理注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />  
	
	<!-- ················开始使用XML管理事务························  --> 
	<!--  配置事务通知（无论哪种方式都要用到事务的核心管理器）-->
	
	<!-- 配置事务通知属性 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <!-- 定义事务传播属性 -->  
        <tx:attributes>  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="new*" propagation="REQUIRED" />  
            <tx:method name="set*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="change*" propagation="REQUIRED" />  
            <tx:method name="check*" propagation="REQUIRED" />  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="*" propagation="REQUIRED" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  
  
    <!-- 配置事务切面 --> 
    <aop:config proxy-target-class="true">  
        <aop:pointcut id="serviceOperation"  
            expression="execution(* com.mf.service.*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />  
    </aop:config>  


	
</beans>